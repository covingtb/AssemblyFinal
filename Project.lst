Microsoft (R) Macro Assembler Version 14.29.30151.0	    08/18/23 21:21:20
3Macros & String Primitives     (Proj6_covingtb.asm	     Page 1 - 1


				TITLE Macros & String Primitives     (Proj6_covingtb.asm)

				; Author: Brenden Covington
				; Last Modified: 8/18/2023
				; OSU email address: covingtb@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number:  6               Due Date: 8/18/2023
				; Description: This program reads 10 input integers from user that fits into a 32 bit register,
				;			   converts these numbers to a SDWORD and saves them in an array, 
				;			   converts them back to strings and displays them and their sums 
				;			   and averages. 

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; MACROS -----------------------------------------------------------------------------------------------------

				; name: mGetString
				; Reads string input from user
				; Precondition: none
				; Postconditions: 	userInput byte array and userInputLength will be modified
				; Receives: prompt a message for user input, string input from user, length of array, max length
				; Returns: userInput = user input string
				;		   userInputLength = length of the user input
				mGetString MACRO prompt, string, userCount, length
					pushad

					mov		EDX, prompt
					call	WriteString
					mov		EDX, string
					mov		ECX, userCount
					call	ReadString
					mov		length, EAX

					popad
				ENDM

				; name: mDisplayString
				; Displays string
				; Precondition: none
				; Postconditions: none
				; Receives: dString = string to be printed			
				; Returns: none
				mDisplayString MACRO dString
					pushad

					mov		EDX, dString
					call	WriteString

					popad
				ENDM

				; Constants -----------------------------------------------------------------------------------------------------

 = 00000030			LO_ASCII				= 48
 = 00000020			ASCII_SPACE				= 32
 = 0000000B			MAX_USER_INPUT			= 11
 = 0000000A			NUM_LENGTH				= 10


 00000000			.data

 00000000 50 52 4F 47 52	intro1					BYTE		"PROGRAMMING ASSIGNMENT 6: Designing low-level I/O procedures by Brenden Covington",0
	   41 4D 4D 49 4E
	   47 20 41 53 53
	   49 47 4E 4D 45
	   4E 54 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 63 65
	   64 75 72 65 73
	   20 62 79 20 42
	   72 65 6E 64 65
	   6E 20 43 6F 76
	   69 6E 67 74 6F
	   6E 00
 00000052 50 6C 65 61 73	intro2					BYTE		"Please provide 10 signed decimal integers small enough to fit inside a 32 bit register.",0
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 20 73 6D 61
	   6C 6C 20 65 6E
	   6F 75 67 68 20
	   74 6F 20 66 69
	   74 20 69 6E 73
	   69 64 65 20 61
	   20 33 32 20 62
	   69 74 20 72 65
	   67 69 73 74 65
	   72 2E 00
 000000AA 41 66 74 65 72	intro3					BYTE		"After you have finished inputting the raw numbers I will display a list of: ",0
	   20 79 6F 75 20
	   68 61 76 65 20
	   66 69 6E 69 73
	   68 65 64 20 69
	   6E 70 75 74 74
	   69 6E 67 20 74
	   68 65 20 72 61
	   77 20 6E 75 6D
	   62 65 72 73 20
	   49 20 77 69 6C
	   6C 20 64 69 73
	   70 6C 61 79 20
	   61 20 6C 69 73
	   74 20 6F 66 3A
	   20 00
 000000F7 54 68 65 20 69	intro4					BYTE		"The integers, their sum, and their average value. ",0
	   6E 74 65 67 65
	   72 73 2C 20 74
	   68 65 69 72 20
	   73 75 6D 2C 20
	   61 6E 64 20 74
	   68 65 69 72 20
	   61 76 65 72 61
	   67 65 20 76 61
	   6C 75 65 2E 20
	   00
 0000012A 50 6C 65 61 73	prompt					BYTE		"Please enter a signed number: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 00000149 59 6F 75 20 65	numMsg					BYTE		"You entered the following numbers:",0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 00
 0000016C 54 68 65 20 73	sumMsg					BYTE		"The sum of these numbers is: ",0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 0000018A 54 68 65 20 74	avgMsg					BYTE		"The truncated average is: ",0
	   72 75 6E 63 61
	   74 65 64 20 61
	   76 65 72 61 67
	   65 20 69 73 3A
	   20 00
 000001A5 54 68 61 6E 6B	farewellMsg				BYTE		"Thanks for playing! ",0
	   73 20 66 6F 72
	   20 70 6C 61 79
	   69 6E 67 21 20
	   00
 000001BA 45 52 52 4F 52	error					BYTE		"ERROR: You did not enter an signed number or your number was too big.",0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 6E 20 73 69
	   67 6E 65 64 20
	   6E 75 6D 62 65
	   72 20 6F 72 20
	   79 6F 75 72 20
	   6E 75 6D 62 65
	   72 20 77 61 73
	   20 74 6F 6F 20
	   62 69 67 2E 00
 00000200 50 6C 65 61 73	error2					BYTE		"Please try again: "
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 3A 20
 00000212  0000000B [		userInput				BYTE		MAX_USER_INPUT DUP(?)
	    00
	   ]
 0000021D 00000000		userInputLength			DWORD		?
 00000221 00000000		userNum					SDWORD		?
 00000225  0000000A [		userNumsArray			SDWORD		10 DUP(?)
	    00000000
	   ]
 0000024D 00000000		setNegative				DWORD		0
 00000251  00000001 [		printString				BYTE		1 DUP(?)
	    00
	   ]
 00000252  00000001 [		avgString				BYTE		1 DUP(?)
	    00
	   ]
 00000253 00000000		userSum					SDWORD		0
 00000257 00000000		userAverage				SDWORD		0

 00000000			.code
 00000000			main PROC

					mDisplayString	OFFSET intro1
 00000000  60		     1		pushad
 00000001  BA 00000000 R     1		mov		EDX, OFFSET intro1
 00000006  E8 00000000 E     1		call	WriteString
 0000000B  61		     1		popad
 0000000C  E8 00000000 E		call			CrLf
 00000011  E8 00000000 E		call			CrLf

					mDisplayString  OFFSET intro2
 00000016  60		     1		pushad
 00000017  BA 00000052 R     1		mov		EDX, OFFSET intro2
 0000001C  E8 00000000 E     1		call	WriteString
 00000021  61		     1		popad
					mDisplayString  OFFSET intro3
 00000022  60		     1		pushad
 00000023  BA 000000AA R     1		mov		EDX, OFFSET intro3
 00000028  E8 00000000 E     1		call	WriteString
 0000002D  61		     1		popad
					mDisplayString  OFFSET intro4
 0000002E  60		     1		pushad
 0000002F  BA 000000F7 R     1		mov		EDX, OFFSET intro4
 00000034  E8 00000000 E     1		call	WriteString
 00000039  61		     1		popad
 0000003A  E8 00000000 E		call			CrLf
 0000003F  E8 00000000 E		call			CrLf
					
 00000044  68 00000225 R		push			OFFSET userNumsArray
 00000049  68 0000024D R		push			OFFSET setNegative
 0000004E  68 000001BA R		push			OFFSET error
 00000053  68 00000200 R		push			OFFSET error2
 00000058  68 0000012A R		push			OFFSET prompt
 0000005D  68 00000212 R		push			OFFSET userInput
 00000062  68 0000021D R		push			OFFSET userInputLength
 00000067  E8 000000A8			call			ReadVal
 0000006C  E8 00000000 E		call			CrLf

					mDisplayString	OFFSET numMsg
 00000071  60		     1		pushad
 00000072  BA 00000149 R     1		mov		EDX, OFFSET numMsg
 00000077  E8 00000000 E     1		call	WriteString
 0000007C  61		     1		popad
 0000007D  E8 00000000 E		call			CrLf

 00000082  68 00000251 R		push			OFFSET printString
 00000087  68 00000225 R		push			OFFSET userNumsArray
 0000008C  E8 000001A2			call			DisplayNumbers
 00000091  E8 00000000 E		call			CrLf
 00000096  E8 00000000 E		call			CrLf

 0000009B  68 00000253 R		push			OFFSET userSum
 000000A0  68 00000225 R		push			OFFSET userNumsArray
 000000A5  E8 000001AA			call			CalculateSum

					mDisplayString  OFFSET sumMsg
 000000AA  60		     1		pushad
 000000AB  BA 0000016C R     1		mov		EDX, OFFSET sumMsg
 000000B0  E8 00000000 E     1		call	WriteString
 000000B5  61		     1		popad

 000000B6  68 00000251 R		push			OFFSET	printString
 000000BB  FF 35 00000253 R		push			userSum
 000000C1  E8 00000107			call			WriteVal
 000000C6  E8 00000000 E		call			CrLf
 000000CB  68 00000257 R		push			OFFSET userAverage
 000000D0  FF 35 00000253 R		push			userSum
 000000D6  E8 0000019B			call			CalcAverage

					mDisplayString  OFFSET avgMsg
 000000DB  60		     1		pushad
 000000DC  BA 0000018A R     1		mov		EDX, OFFSET avgMsg
 000000E1  E8 00000000 E     1		call	WriteString
 000000E6  61		     1		popad

 000000E7  68 00000251 R		push			OFFSET	printString
 000000EC  FF 35 00000257 R		push			userAverage
 000000F2  E8 000000D6			call			WriteVal
 000000F7  E8 00000000 E		call			CrLf
 000000FC  E8 00000000 E		call			CrLf

					mDisplayString OFFSET farewellMsg
 00000101  60		     1		pushad
 00000102  BA 000001A5 R     1		mov		EDX, OFFSET farewellMsg
 00000107  E8 00000000 E     1		call	WriteString
 0000010C  61		     1		popad

					Invoke ExitProcess,0	; exit to operating system
 0000010D  6A 00	   *	    push   +000000000h
 0000010F  E8 00000000 E   *	    call   ExitProcess
 00000114			main ENDP


				; name: ReadVal
				; Reads integer input as string converting to integer and then storing each number into an SDWORD array
				; Precondition: none
				; Postconditions: userNums array will be filled with 10 SDWORD integers. setNegative & userInputLength will be changed
				; Receives: [EBP + 8] for userInputLen, [EBP + 12] as userInput, [EBP + 16]	for prompt, [EBP + 20] for errorMsg, [EBP + 24] to setNegative,
				;			and [EBP + 28] for userNums.
				; Returns: userNums array filled with signed integers
 00000114			ReadVal PROC
 00000114  55				push	EBP
 00000115  8B EC			mov		EBP, ESP
 00000117  60				pushad

 00000118  B9 0000000A			mov		ECX, NUM_LENGTH
 0000011D  8B 7D 20			mov		EDI, [EBP + 32]	

 00000120			_prompt:
 00000120  51				push	ECX
					mGetString	[EBP + 16], [EBP + 12], MAX_USER_INPUT, [EBP + 8]
 00000121  60		     1		pushad
 00000122  8B 55 10	     1		mov		EDX, [EBP + 16]
 00000125  E8 00000000 E     1		call	WriteString
 0000012A  8B 55 0C	     1		mov		EDX, [EBP + 12]
 0000012D  B9 0000000B	     1		mov		ECX, MAX_USER_INPUT
 00000132  E8 00000000 E     1		call	ReadString
 00000137  89 45 08	     1		mov		[EBP + 8], EAX
 0000013A  61		     1		popad
 0000013B  50				push	EAX
 0000013C  8B 45 08			mov		EAX, [EBP + 8]				; set ECX as the count of userInput
 0000013F  8B C8			mov		ECX, EAX
 00000141  58				pop		EAX
 00000142  8B 75 0C			mov		ESI, [EBP + 12]				; reset userInput mem location
 00000145  BB 00000000			mov		EBX, 0
 0000014A  89 5D 18			mov		[EBP + 24], EBX				; reset negation variable

 0000014D			_checkSign:
 0000014D  AC				lodsb
 0000014E  3C 2D			cmp		AL, 45
 00000150  74 06			je		_negative
 00000152  3C 2B			cmp		AL, 43
 00000154  74 0F			je		_positive
 00000156  EB 12			jmp		_validate

 00000158			_negative:
 00000158  53				push	EBX
 00000159  BB 00000001			mov		EBX, 1
 0000015E  89 5D 18			mov		[EBP + 24], EBX				; modify negative to 1
 00000161  5B				pop		EBX
 00000162  49				dec		ECX
 00000163  EB 01			jmp		_advance

 00000165			_positive:
 00000165  49				dec		ECX

 00000166			_advance:
 00000166  FC				cld
 00000167  AC				lodsb
 00000168  EB 00			jmp		_validate

 0000016A			_validate:								; validates range
 0000016A  3C 30			cmp		AL, 48
 0000016C  72 06			jb		_tooLow
 0000016E  3C 39			cmp		AL, 57
 00000170  77 02			ja		_tooLow
 00000172  EB 19			jmp		_repeat

 00000174			_tooLow:
					mDisplayString	[EBP + 20]
 00000174  60		     1		pushad
 00000175  8B 55 14	     1		mov		EDX, [EBP + 20]
 00000178  E8 00000000 E     1		call	WriteString
 0000017D  61		     1		popad
 0000017E  E8 00000000 E		call			CrLf
 00000183  59				pop				ECX					; restore ECX
 00000184  BB 00000000			mov				EBX, 0
 00000189  89 1F			mov				[EDI], EBX			; reset value in destination register
 0000018B  EB 93			jmp				_prompt
						
 0000018D			_repeat:
 0000018D  8B 1F			mov		EBX, [EDI]					; save previous added value
 0000018F  50				push	EAX							; preserve AL
 00000190  53				push	EBX
 00000191  8B C3			mov		EAX, EBX					
 00000193  BB 0000000A			mov		EBX, 10
 00000198  F7 E3			mul		EBX							; 10 * (EAX <= EBX)
 0000019A  89 07			mov		[EDI], EAX
 0000019C  5B				pop		EBX
 0000019D  58				pop		EAX
 0000019E  2C 30			sub		AL, LO_ASCII
 000001A0  00 07			add		[EDI], AL
 000001A2  49				dec		ECX
 000001A3  83 F9 00			cmp		ECX, 0
 000001A6  77 BE			ja		_advance
 000001A8  50				push	EAX
 000001A9  8B 45 18			mov		EAX, [EBP + 24]				; if negative is set, jump to _neggate
 000001AC  83 F8 01			cmp		EAX, 1
 000001AF  74 02			je		_neggate
 000001B1  EB 06			jmp		_continue

 000001B3			_neggate:
 000001B3  8B 07			mov		EAX, [EDI]
 000001B5  F7 D8			neg		EAX
 000001B7  89 07			mov		[EDI], EAX

 000001B9			_continue:
 000001B9  58				pop		EAX
 000001BA  83 C7 04			add		EDI, 4
 000001BD  59				pop		ECX
 000001BE  49				dec		ECX
 000001BF  83 F9 00			cmp		ECX, 0
 000001C2  0F 85 FFFFFF58		jnz		_prompt

 000001C8  61				popad
 000001C9  5B				pop		EBX
 000001CA  C2 001C			ret		28
 000001CD			ReadVal ENDP


				; name: WriteVal
				; Displays an integer by performing ASCII conversion and displaying string number as shown in Exploration 2
				; Precondition: none
				; Postconditions: Sring will be modified 
				; Receives: [EBP + 8] as userNums, [EBP + 12] as printString address
				; Returns: none
 000001CD			WriteVal PROC
 000001CD  55				push	EBP
 000001CE  8B EC			mov		EBP, ESP
 000001D0  60				pushad

 000001D1  8B 7D 0C			mov		EDI, [EBP + 12]				; printString address
 000001D4  8B 45 08			mov		EAX, [EBP + 8]				; write number to printString

 000001D7			_checkSign:
 000001D7  83 F8 00			cmp		EAX, 0
 000001DA  7C 03			jl		_neggate
 000001DC  EB 13			jmp		_pushNullBit
 000001DE  FC				cld

 000001DF			_neggate:
 000001DF  50				push	EAX
 000001E0  B0 2D			mov		AL, 45
 000001E2  AA				stosb	
					mDisplayString	[EBP + 12]
 000001E3  60		     1		pushad
 000001E4  8B 55 0C	     1		mov		EDX, [EBP + 12]
 000001E7  E8 00000000 E     1		call	WriteString
 000001EC  61		     1		popad
 000001ED  4F				dec		EDI							; Move back to beginning of string
 000001EE  58				pop		EAX
 000001EF  F7 D8			neg		EAX							

 000001F1			_pushNullBit:
 000001F1  6A 00			push	0

 000001F3			_asciiConvert:
 000001F3  BA 00000000			mov		EDX, 0
 000001F8  BB 0000000A			mov		EBX, 10
 000001FD  F7 F3			div		EBX
 000001FF  8B CA			mov		ECX, EDX
 00000201  83 C1 30			add		ECX, 48
 00000204  51				push	ECX
 00000205  83 F8 00			cmp		EAX, 0
 00000208  74 02			je		_displayLoop
 0000020A  EB E7			jmp		_asciiConvert

 0000020C			_displayLoop:
 0000020C  58				pop		EAX
 0000020D  AA				stosb
					mDisplayString	[EBP + 12]
 0000020E  60		     1		pushad
 0000020F  8B 55 0C	     1		mov		EDX, [EBP + 12]
 00000212  E8 00000000 E     1		call	WriteString
 00000217  61		     1		popad
 00000218  4F				dec		EDI									; loop display
 00000219  83 F8 00			cmp		EAX, 0
 0000021C  74 02			je		_exitAsciiConvert
 0000021E  EB EC			jmp		_displayLoop

 00000220			_exitAsciiConvert:
 00000220  B0 20			mov				AL, ASCII_SPACE
 00000222  AA				stosb
					mDisplayString	[EBP + 12]
 00000223  60		     1		pushad
 00000224  8B 55 0C	     1		mov		EDX, [EBP + 12]
 00000227  E8 00000000 E     1		call	WriteString
 0000022C  61		     1		popad
 0000022D  4F				dec				EDI							; reset for next use 
					
 0000022E  61				popad
 0000022F  5D				pop				EBP
 00000230  C2 0008			ret	8
 00000233			WriteVal ENDP


				; name: DisplayNumbers
				; Loops over SDWORD numbers array and calls WriteVal to display the numbers
				; Precondition: array must be filled with valid inputs
				; Postconditions: none 
				; Receives: [EBP + 8] SDWORD integer, [EBP + 12] string address, MAX_NUM_LENGTH as the length of the SDWORD array
				; Returns: none
 00000233			DisplayNumbers PROC
 00000233  55				push	EBP
 00000234  8B EC			mov		EBP, ESP
 00000236  60				pushad

 00000237  8B 75 08			mov		ESI, [EBP + 8]				; input array
 0000023A  8B 7D 0C			mov		EDI, [EBP + 12]				; printString
 0000023D  B9 0000000A			mov		ECX, NUM_LENGTH

 00000242			_printNumber:
 00000242  57				push	EDI
 00000243  FF 36			push	[ESI]
 00000245  E8 FFFFFF83			call	WriteVal
 0000024A  83 C6 04			add		ESI, 4
 0000024D  E2 F3			loop	_printNumber

 0000024F  61				popad
 00000250  5D				pop		EBP	
 00000251  C2 000C			ret		12
 00000254			DisplayNumbers ENDP


				; name: CalculateSum
				; Loops over SDWORD numbers array calculates the sum
				; Precondition: Array must be filled with valid inputs
				; Postconditions: sum variable will be altered
				; Receives: [EBP + 12] as sum, [EBP + 8] SDWORD array, and MAX_NUM_LENGTH as array length
				; Returns: sum
 00000254			CalculateSum PROC
 00000254  55				push	EBP
 00000255  8B EC			mov		EBP, ESP
 00000257  60				pushad

 00000258  8B 75 08			mov		ESI, [EBP + 8]				; input array
 0000025B  B9 0000000A			mov		ECX, NUM_LENGTH
 00000260  B8 00000000			mov		EAX, 0

 00000265			_sumNumbers:
 00000265  03 06			add		EAX, [ESI]
 00000267  83 C6 04			add		ESI, 4
 0000026A  E2 F9			loop	_sumNumbers
 0000026C  8B 5D 0C			mov		EBX, [EBP + 12]
 0000026F  89 03			mov		[EBX], EAX

 00000271  61				popad
 00000272  5D				pop		EBP
 00000273  C2 0008			ret		8
 00000276			CalculateSum ENDP


				; name: CalcAverage
				; Does signed integer division on sum variable previously calculated and returns average variable
				; Precondition: sum must be preexisting and holding a valid number
				; Postconditions: average variable will be altered 
				; Receives: [EBP + 8] for the sum, and [EBP + 12] for the average
				; Returns: average of user numbers
 00000276			CalcAverage PROC
 00000276  55				push	EBP
 00000277  8B EC			mov		EBP, ESP
 00000279  60				pushad

 0000027A  B9 0000000A			mov		ECX, NUM_LENGTH
 0000027F  8B 45 08			mov		EAX, [EBP + 8]					
					
 00000282			_divide:
 00000282  BB 0000000A			mov		EBX, NUM_LENGTH
 00000287  BA 00000000			mov		EDX, 0
 0000028C  99				cdq
 0000028D  F7 FB			idiv	EBX
 0000028F  8B 5D 0C			mov		EBX, [EBP + 12]					
 00000292  89 03			mov		[EBX], EAX

 00000294  61				popad
 00000295  5D				pop		EBP
 00000296  C2 000C			ret		12
 00000299			CalcAverage ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30151.0	    08/18/23 21:21:20
3Macros & String Primitives     (Proj6_covingtb.asm	     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000025B Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000299 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CalcAverage  . . . . . . . . . .	P Near	 00000276 _TEXT	Length= 00000023 Public STDCALL
  _divide  . . . . . . . . . . .	L Near	 00000282 _TEXT	
CalculateSum . . . . . . . . . .	P Near	 00000254 _TEXT	Length= 00000022 Public STDCALL
  _sumNumbers  . . . . . . . . .	L Near	 00000265 _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DisplayNumbers . . . . . . . . .	P Near	 00000233 _TEXT	Length= 00000021 Public STDCALL
  _printNumber . . . . . . . . .	L Near	 00000242 _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000114 _TEXT	Length= 000000B9 Public STDCALL
  _prompt  . . . . . . . . . . .	L Near	 00000120 _TEXT	
  _checkSign . . . . . . . . . .	L Near	 0000014D _TEXT	
  _negative  . . . . . . . . . .	L Near	 00000158 _TEXT	
  _positive  . . . . . . . . . .	L Near	 00000165 _TEXT	
  _advance . . . . . . . . . . .	L Near	 00000166 _TEXT	
  _validate  . . . . . . . . . .	L Near	 0000016A _TEXT	
  _tooLow  . . . . . . . . . . .	L Near	 00000174 _TEXT	
  _repeat  . . . . . . . . . . .	L Near	 0000018D _TEXT	
  _neggate . . . . . . . . . . .	L Near	 000001B3 _TEXT	
  _continue  . . . . . . . . . .	L Near	 000001B9 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 000001CD _TEXT	Length= 00000066 Public STDCALL
  _checkSign . . . . . . . . . .	L Near	 000001D7 _TEXT	
  _neggate . . . . . . . . . . .	L Near	 000001DF _TEXT	
  _pushNullBit . . . . . . . . .	L Near	 000001F1 _TEXT	
  _asciiConvert  . . . . . . . .	L Near	 000001F3 _TEXT	
  _displayLoop . . . . . . . . .	L Near	 0000020C _TEXT	
  _exitAsciiConvert  . . . . . .	L Near	 00000220 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000114 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ASCII_SPACE  . . . . . . . . . .	Number	 00000020h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO_ASCII . . . . . . . . . . . .	Number	 00000030h   
MAX_USER_INPUT . . . . . . . . .	Number	 0000000Bh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
NUM_LENGTH . . . . . . . . . . .	Number	 0000000Ah   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
avgMsg . . . . . . . . . . . . .	Byte	 0000018A _DATA	
avgString  . . . . . . . . . . .	Byte	 00000252 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
error2 . . . . . . . . . . . . .	Byte	 00000200 _DATA	
error  . . . . . . . . . . . . .	Byte	 000001BA _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
farewellMsg  . . . . . . . . . .	Byte	 000001A5 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro1 . . . . . . . . . . . . .	Byte	 00000000 _DATA	
intro2 . . . . . . . . . . . . .	Byte	 00000052 _DATA	
intro3 . . . . . . . . . . . . .	Byte	 000000AA _DATA	
intro4 . . . . . . . . . . . . .	Byte	 000000F7 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
numMsg . . . . . . . . . . . . .	Byte	 00000149 _DATA	
printString  . . . . . . . . . .	Byte	 00000251 _DATA	
prompt . . . . . . . . . . . . .	Byte	 0000012A _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
setNegative  . . . . . . . . . .	DWord	 0000024D _DATA	
sumMsg . . . . . . . . . . . . .	Byte	 0000016C _DATA	
userAverage  . . . . . . . . . .	DWord	 00000257 _DATA	
userInputLength  . . . . . . . .	DWord	 0000021D _DATA	
userInput  . . . . . . . . . . .	Byte	 00000212 _DATA	
userNumsArray  . . . . . . . . .	DWord	 00000225 _DATA	
userNum  . . . . . . . . . . . .	DWord	 00000221 _DATA	
userSum  . . . . . . . . . . . .	DWord	 00000253 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
